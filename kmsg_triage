#!/usr/bin/ruby

# Copyright (c) 2015 Intel Corporation

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# [Description]: Triage various dmesg trace log for an unique tag 
# [Author]: ethan.gao@intel.com


DMESG_ROOT = ENV['DMESG_TRIAGE_ROOT'] || File.dirname(File.dirname(File.realpath($0)))
require "#{DMESG_ROOT}/dmesg.rb"

if ENV['KMSG_TRIAGE_LOG']
	KMSG = ENV['KMSG_TRIAGE_LOG']
	kmsg_file = "#{KMSG}/.dmesg"
	
	if File.exist? kmsg_file
		dmesg_file = kmsg_file
	end

elsif ARGV[0]
	dmesg_file = ARGV[0]
else
	exit
end

if not File.exist?(dmesg_file) or File.size(dmesg_file) == 0
	puts "No required dmesg file found !"
	exit
end

def oops_to_bisect_pattern(line)
		words = line.split
		return '' if words.empty?
		patterns = []
		words.each { |w|
			case w
			when /([a-zA-Z0-9_]+)\.(isra|constprop|part)\.[0-9]+\+0x/
				patterns << $1
				break
			when /([a-zA-Z0-9_]+\+0x)/, /([a-zA-Z0-9_]+=)/
				patterns << $1
				break
			when /[^a-zA-Z\/:._-]/
				patterns << '.*' if patterns[-1] != '.*'
			else
				patterns << w
			end
		}
		patterns.shift while patterns[0] == '.*'
		patterns.pop   if patterns[-1] == '.*'
		patterns.join(' ')
end

error_ids = {}
if $PROGRAM_NAME =~ /kmsg_triage/
	output = grep_crash_head dmesg_file, '-o'
end
exit if output.empty?

output.each_line { |line|
	line.chomp!

	next if line =~ /INFO: Stall ended before state dump start/
	next if line =~ /INFO: NMI handler .* took too long to run:/
	next if line =~ /Killed process \d+ \(/					# duplicated with "Out of memory: Kill process "

	# print_hex_dump
	next if line =~ /(\s[0-9a-f]{2}){16}/
	next if line =~ /(\s[0-9a-f]{4}){8}/
	next if line =~ /(\s[0-9a-f]{8}){4}/

	next if line =~ /[^\t\n\0[:print:]]/
	line.tr! "\0", ''

	case line
	when /(INFO: rcu[_a-z]* self-detected stall on CPU)/,
	     /(INFO: rcu[_a-z]* detected stalls on CPUs\/tasks:)/
		line = $1
		bug_to_bisect = $1
	when /(BUG: unable to handle kernel)/,
	     /(BUG: unable to handle kernel) NULL pointer dereference/,
	     /(BUG: unable to handle kernel) paging request/
		line = $1
		bug_to_bisect = $1
	when /(BUG: scheduling while atomic:)/,
	     /(BUG: Bad page map in process)/,
	     /(BUG: Bad page state in process)/,
	     /(BUG: soft lockup - CPU#\d+ stuck for \d+s!)/,
	     /(BUG: spinlock .* on CPU#\d+)/
		line = $1
		bug_to_bisect = $1
	when /(BUG: ).* (still has locks held)/,
	     /(INFO: task ).* (blocked for more than \d+ seconds)/
		line = $1 + $2
		bug_to_bisect = $2
	when /WARNING:.* at .* ([a-zA-Z.0-9_]+\+0x)/
		bug_to_bisect = 'WARNING:.* at .* ' + $1.sub(/\.(isra|constprop|part)\.[0-9]+\+0x/, '')
		line =~ /(at .*)/
		line = "WARNING: " + $1
	when /(Kernel panic - not syncing: No working init found.)  Try passing init= option to kernel. /,
	     /(Kernel panic - not syncing: No init found.)  Try passing init= option to kernel. /
		line = $1
		bug_to_bisect = line
	when /(Out of memory: Kill process) \d+ \(/
		line = $1
		bug_to_bisect = $1
	when /(Writer stall state) \d+ g\d+ c\d+ f/
		line = $1
		bug_to_bisect = $1
	when /(used greatest stack depth:)/
		line = $1
		bug_to_bisect = $1
	# printk(KERN_ERR "BUG: Dentry %p{i=%lx,n=%pd} still in use (%d) [unmount of %s %s]\n"
	when  /(BUG: Dentry ).* (still in use) .* \[unmount of /
		line = $1 + $2
		bug_to_bisect = $1 + '.* ' + $2
	when /([a-zA-Z]+[ a-zA-Z]*: [a-f0-9]{4}) \[#[0-9]+\] [A-Z_ ]*$/
		line = $1
		bug_to_bisect = $1
	when /^backtrace:([a-zA-Z0-9_]+)/
		bug_to_bisect = $1 + '+0x'
	else
		bug_to_bisect = oops_to_bisect_pattern line
	end

	error_id = line.sub(/^[^a-zA-Z]+/, "")

	error_id.gsub! /\ \]$/, ""					# [ INFO: possible recursive locking detected ]
	#error_id.gsub! /\/c\/kernel-tests\/src\/[^\/]+\//, ''
	#error_id.gsub! /\/c\/(wfg|yliu)\/[^\/]+\//, ''
	#error_id.gsub! /\/lkp\/[^\/]+\/linux[0-9]*\//, ''
	#error_id.gsub! /\/kernel-tests\/linux[0-9]*\//, ''
	error_id.gsub! /\.(isra|constprop|part)\.[0-9]+/, ''

	error_id.gsub! /\b[0-9a-f]{8}\b/, "#"
	error_id.gsub! /\b[0-9a-f]{16}\b/, "#"
	error_id.gsub! /(=)[0-9a-f]+\b/, '\1#'
	error_id.gsub! /[+\/]0x[0-9a-f]+\b/, ''
	error_id.gsub! /[+\/][0-9a-f]+\b/, ''

	#error_id = common_error_id(error_id) + ': 1'
	error_id = common_error_id(error_id)

	error_id.gsub! /([a-z]:)[0-9]+\b/, '\1'				# WARNING: at arch/x86/kernel/cpu/perf_event.c:1077 x86_pmu_start+0xaa/0x110()
	error_id.gsub! /#:\[<#>\]\[<#>\]/, ''				# RIP: 0010:[<ffffffff91906d8d>]  [<ffffffff91906d8d>] validate_chain+0xed/0xe80

	next if error_id.size <= 3

	error_ids[error_id] ||= bug_to_bisect
}

exit if error_ids.empty?

puts "Found necessary kmsg error ids" if $PROGRAM_NAME =~ /kmsg_triage/

KMSG_ERROR_ID = ENV['KMSG_TRIAGE_LOG'] || "#{DMESG_ROOT}"
# This stores each error id
f = File.new(File.join("#{KMSG_ERROR_ID}", ".dmesg_error_ids"), "w")
error_ids.each { |error_id, head|
	f.write("#{error_id}@#{head}\n")
}

f.close

